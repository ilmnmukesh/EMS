# Generated by Django 3.2 on 2021-12-28 10:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('br_id', models.AutoField(primary_key=True, serialize=False)),
                ('br_name', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Circular',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100)),
                ('download', models.CharField(max_length=255)),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('update', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('c_id', models.CharField(max_length=6, primary_key=True, serialize=False)),
                ('c_name', models.CharField(max_length=100)),
                ('c_qp_code', models.CharField(max_length=6)),
                ('c_code', models.CharField(max_length=6)),
                ('c_credits', models.IntegerField()),
                ('c_type', models.CharField(choices=[('Theory', 'Theory'), ('Laboratory', 'Lab')], default='Theory', max_length=15)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('dep_id', models.AutoField(primary_key=True, serialize=False)),
                ('dep_name', models.CharField(max_length=100)),
                ('dep_hod', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Instruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Regulation',
            fields=[
                ('reg_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('reg_value', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('rollno', models.CharField(db_index=True, max_length=255, primary_key=True, serialize=False)),
                ('std_name', models.CharField(max_length=100)),
                ('std_dob', models.DateField(default=django.utils.timezone.now)),
                ('std_addr', models.TextField()),
                ('std_email', models.EmailField(max_length=254)),
                ('std_contact', models.CharField(max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('br_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.branch')),
                ('dep_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.department')),
                ('reg_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.regulation')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstructionPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('instruction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.instruction')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('f_id', models.AutoField(primary_key=True, serialize=False)),
                ('f_name', models.CharField(max_length=100)),
                ('f_designation', models.CharField(choices=[('Teaching Follow', 'Teaching Follow'), ('Assistant Professor', 'Assistant Professor'), ('Professor', 'Professor')], default='Teaching Follow', max_length=20)),
                ('dep_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.department')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseList',
            fields=[
                ('cl_id', models.AutoField(primary_key=True, serialize=False)),
                ('sems', models.CharField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8')], default='1', max_length=1)),
                ('br_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.branch')),
                ('c_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.course')),
                ('f_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.faculty')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseFee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fee', models.IntegerField()),
                ('c_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Source.course')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='course',
            name='dep_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.department'),
        ),
        migrations.AddField(
            model_name='branch',
            name='dep_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.department'),
        ),
        migrations.CreateModel(
            name='StudentEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.CharField(choices=[('Not Assign', 'NA'), ('Shortage of Attendance', 'SA'), ('ReAppear', 'RA'), ('Above Average', 'B'), ('Good', 'B+'), ('Very Good', 'A'), ('Excellet', 'A+'), ('Outstanding', 'O')], default='NA', max_length=30)),
                ('external_marks', models.IntegerField(null=True)),
                ('internal_marks', models.IntegerField(null=True)),
                ('attendance', models.IntegerField(null=True)),
                ('att_1', models.IntegerField(null=True)),
                ('att_2', models.IntegerField(null=True)),
                ('att_3', models.IntegerField(null=True)),
                ('int_1', models.IntegerField(null=True)),
                ('int_2', models.IntegerField(null=True)),
                ('int_3', models.IntegerField(null=True)),
                ('cl_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.courselist')),
                ('regulation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.regulation')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Source.session')),
                ('std_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('std_id', 'cl_id', 'session')},
            },
        ),
    ]
